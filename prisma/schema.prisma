// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Model for Doctors
model Doctor {
  id              Int      @id @default(autoincrement())
  name            String   
  email           String   @unique
  password        String
  licenseNo       String
  specialization  String
  location        String?
  contactNo       String?
  createdAt       DateTime @default(now())
  otpCode         String?
  otpVerified     Boolean  @default(false)

  // Relationships
  sentChats       Chat[]   @relation("DoctorChatsSender")
  receivedChats   Chat[]   @relation("DoctorChatsReceiver")
  meetings        Meeting[] 
  availabilities  Availability[]
  payments        Payment[] // Payments associated with a doctor
}

// Model for Patients
model Patient {
  id              Int      @id @default(autoincrement())
  name            String   
  email           String   @unique
  password        String
  bloodType       String  
  location        String?
  contactNo       String?
  createdAt       DateTime @default(now())
  otpCode         String?
  otpVerified     Boolean  @default(false)

  // Relationships
  sentChats       Chat[]   @relation("PatientChatsSender")
  receivedChats   Chat[]   @relation("PatientChatsReceiver")
  meetings        Meeting[]
  payments        Payment[] // Payments associated with a patient
}

// Model for Chat
model Chat {
  id               Int      @id @default(autoincrement())
  doctorSenderId   Int?
  patientSenderId  Int?
  doctorReceiverId Int?
  patientReceiverId Int?
  message          String
  createdAt        DateTime @default(now())

  // Relations
  doctorSender    Doctor?  @relation("DoctorChatsSender", fields: [doctorSenderId], references: [id], onDelete: Cascade)
  patientSender   Patient? @relation("PatientChatsSender", fields: [patientSenderId], references: [id], onDelete: Cascade)
  doctorReceiver  Doctor?  @relation("DoctorChatsReceiver", fields: [doctorReceiverId], references: [id], onDelete: Cascade)
  patientReceiver Patient? @relation("PatientChatsReceiver", fields: [patientReceiverId], references: [id], onDelete: Cascade)
}

// Model for Meeting (Appointment)
model Meeting {
  id             Int      @id @default(autoincrement())
  doctorId       Int
  patientId      Int
  availabilityId Int   // Ensures scheduling within available time
  scheduledAt    DateTime
  createdAt      DateTime @default(now())

  doctor         Doctor        @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  patient        Patient       @relation(fields: [patientId], references: [id], onDelete: Cascade)
  availability   Availability  @relation(fields: [availabilityId], references: [id], onDelete: Cascade)

  @@unique([availabilityId]) // Ensures only one meeting per availability slot
}

// Model for Doctor's Availability
model Availability {
  id          Int      @id @default(autoincrement())
  doctorId    Int
  startTime   DateTime
  endTime     DateTime

  doctor      Doctor     @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  meetings    Meeting[]  // Added back-relation to Meeting

  @@unique([doctorId, startTime, endTime]) // Prevents duplicate time slots
}

// Model for Payments
model Payment {
  id               Int      @id @default(autoincrement())
  patientId        Int
  doctorId         Int
  transactionUuid  String   @unique
  transactionCode  String?
  amount           Float
  status           String   // "PENDING", "COMPLETE", "FAILED"
  createdAt        DateTime @default(now())

  // Relations
  patient          Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor           Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}
